###############################################################################
# Prompt color scheme                                                         #
###############################################################################

bold='';
reset="\e[0m";
black="\e[1;30m";
blue="\e[1;34m";
cyan="\e[1;36m";
green="\e[1;32m";
orange="\e[1;33m";
purple="\e[1;35m";
red="\e[1;31m";
violet="\e[1;35m";
white="\e[1;37m";
yellow="\e[1;33m";

###############################################################################
# Functions for prompt info                                                   #
###############################################################################

# Git branch discovery function
function git_branch {
    branch=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`;

    # Check if anything exists in the branch else return empty string
    if [ ! "${branch}" == "" ]; then
		echo "[${branch}]";
	else
		echo "";
	fi;
}

# Git status check function
function git_status {
    git_command=`git status 2>&1 | tee`;
    symbols='';

    # # Check if the current directory is in a Git repository.
    # if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
    #     return;
    # fi;
    #
    # # check if the current directory is in .git before running git checks
    # if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
    #     return;
    # fi;

    # Check if any unstaged changes
    unstaged=`echo -n "${git_command}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`;
    if [ "${unstaged}" == "0" ]; then
		symbols+='!';
	fi;

    # Check if any files are untracked
    untracked=`echo -n "${git_command}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`;
    if [ "${untracked}" == "0" ]; then
		symbols+='?';
	fi;

    # Check if local repo is ahead
    ahead=`echo -n "${git_command}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`;
    if [ "${ahead}" == "0" ]; then
		symbols+='*';
	fi;

    # Check if any uncommitted files
    uncommitted=`echo -n "${git_command}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`;
    if [ "${uncommitted}" == "0" ]; then
		symbols+='+';
	fi;

    # Check if any files renamed
    renamed=`echo -n "${git_command}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`;
    if [ "${renamed}" == "0" ]; then
		symbols+='>';
	fi;

    # Check if any deleted files
    deleted=`echo -n "${git_command}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`;
    if [ "${deleted}" == "0" ]; then
		symbols+='x';
	fi;

    # Check if any stashed files
    if $(git rev-parse --verify refs/stash &>/dev/null); then
        symbols+='$';
    fi;

    # Return any symbols found
    if [ ! "${symbols}" == "" ]; then
        echo "[${symbols}]";
    else
        echo "";
    fi;
}

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	user_style="${red}";
else
	user_style="${green}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	host_style="${bold}${yellow}";
else
	host_style="${green}";
fi;

# Find exit status of last command to determine user input color TODO doesnt work
if [ $? -ne 0 ]; then
    user_input="${red}";
else
    user_input="${blue}";
fi;

###############################################################################
# Prompt 1 setup                                                              #
###############################################################################

# TODO do a check for git, xcode, and anything else before adding git status

# Start user input with new line
PS1="\n";

# Add timestamp
PS1+="\[${green}\]\t\[${reset}\]"

# Add connector
PS1+=" ";

# Set username
PS1+="\[${user_style}\]\u\[${reset}\]";

# Add connector
PS1+="\[${reset}\] @ \[${reset}\]";

# Set username
PS1+="\[${host_style}\]\H\[${reset}\]";

# Add connector
PS1+="\[${reset}\]: \[${reset}\]";

# Set working directory
PS1+="\[${reset}\]\W\[${reset}\]";

# Add connector
PS1+=" ";

# Git repository branch details
PS1+="\[${purple}\]\`git_branch\`\[${reset}\]";

# Add connector
PS1+=" ";

# Git repository status details
PS1+="\[${yellow}\]\`git_status\`\[${reset}\]";

# New line to split current full directory
PS1+="\n";

# Set current full directory
PS1+="\[${green}\]< \[${reset}\]\`pwd\`\[${green}\] >\[${reset}\]";

# New line to split for user input
PS1+="\n";

# User input line and reset colors
PS1+="\[${user_input}\]=> \[${reset}\]";

# export new prompt 1
export PS1;

###############################################################################
# Prompt 2 setup (continued user input)                                       #
###############################################################################

# Prompt shell 2 setup
PS2="\[${user_input}\]===> \[${reset}\]";

# export new prompt 2
export PS2;
